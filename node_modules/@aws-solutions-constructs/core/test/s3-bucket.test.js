"use strict";
/**
 *  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const s3 = require("aws-cdk-lib/aws-s3");
const kms = require("aws-cdk-lib/aws-kms");
const defaults = require("../index");
const utils_1 = require("../lib/utils");
require("@aws-cdk/assert/jest");
test('test s3Bucket override versioningConfiguration', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const defaultProps = defaults.DefaultS3Props();
    const inProps = {
        versioned: false
    };
    const outProps = utils_1.overrideProps(defaultProps, inProps);
    new s3.Bucket(stack, 'test-s3-verioning', outProps);
    expect(stack).toHaveResource("AWS::S3::Bucket", {
        BucketEncryption: {
            ServerSideEncryptionConfiguration: [
                {
                    ServerSideEncryptionByDefault: {
                        SSEAlgorithm: "AES256"
                    }
                }
            ]
        },
        PublicAccessBlockConfiguration: {
            BlockPublicAcls: true,
            BlockPublicPolicy: true,
            IgnorePublicAcls: true,
            RestrictPublicBuckets: true
        }
    });
});
test('test s3Bucket override bucketEncryption', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const defaultProps = defaults.DefaultS3Props();
    const inProps = {
        encryption: s3.BucketEncryption.KMS,
        encryptionKey: new kms.Key(stack, 'mykeyid')
    };
    const outProps = utils_1.overrideProps(defaultProps, inProps);
    new s3.Bucket(stack, 'test-s3-encryption', outProps);
    expect(stack).toHaveResource("AWS::S3::Bucket", {
        BucketEncryption: {
            ServerSideEncryptionConfiguration: [
                {
                    ServerSideEncryptionByDefault: {
                        KMSMasterKeyID: {
                            "Fn::GetAtt": [
                                "mykeyidFA4203B0",
                                "Arn"
                            ]
                        },
                        SSEAlgorithm: "aws:kms"
                    }
                }
            ]
        },
    });
});
test('test s3Bucket override publicAccessBlockConfiguration', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const defaultProps = defaults.DefaultS3Props();
    const inProps = {
        blockPublicAccess: s3.BlockPublicAccess.BLOCK_ACLS
    };
    const outProps = utils_1.overrideProps(defaultProps, inProps);
    new s3.Bucket(stack, 'test-s3-publicAccessBlock', outProps);
    expect(stack).toHaveResource("AWS::S3::Bucket", {
        PublicAccessBlockConfiguration: {
            BlockPublicAcls: true,
            IgnorePublicAcls: true
        },
    });
});
test('test s3Bucket add lifecycleConfiguration', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const defaultProps = defaults.DefaultS3Props();
    const inProps = {
        lifecycleRules: [{
                expiration: aws_cdk_lib_1.Duration.days(365)
            }]
    };
    const outProps = utils_1.overrideProps(defaultProps, inProps);
    new s3.Bucket(stack, 'test-s3-lifecycle', outProps);
    expect(stack).toHaveResource("AWS::S3::Bucket", {
        LifecycleConfiguration: {
            Rules: [
                {
                    Status: 'Enabled',
                    ExpirationInDays: 365,
                }
            ]
        }
    });
});
test('test s3Bucket override serverAccessLogsBucket', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const myLoggingBucket = new s3.Bucket(stack, 'MyS3LoggingBucket', defaults.DefaultS3Props());
    const myS3Props = defaults.DefaultS3Props(myLoggingBucket);
    defaults.buildS3Bucket(stack, {
        bucketProps: myS3Props
    });
    expect(stack).toHaveResource("AWS::S3::Bucket", {
        LoggingConfiguration: {
            DestinationBucketName: {
                Ref: "MyS3LoggingBucket119BE896"
            }
        }
    });
});
test('test createAlbLoggingBucket()', () => {
    const stack = new aws_cdk_lib_1.Stack();
    defaults.createAlbLoggingBucket(stack, 'test-bucket', {
        bucketName: 'test-name'
    });
    expect(stack).toHaveResource("AWS::S3::Bucket", {
        BucketName: 'test-name'
    });
});
test('Test bucket policy that only accepts SSL requests only', () => {
    const stack = new aws_cdk_lib_1.Stack();
    defaults.buildS3Bucket(stack, {
        bucketProps: {
            enforceSSL: true
        }
    }, 'test-bucket');
    expect(stack).toHaveResource("AWS::S3::BucketPolicy", {
        PolicyDocument: {
            Statement: [
                {
                    Action: "s3:*",
                    Condition: {
                        Bool: {
                            "aws:SecureTransport": "false"
                        }
                    },
                    Effect: "Deny",
                    Principal: {
                        AWS: "*"
                    },
                    Resource: [
                        {
                            "Fn::GetAtt": [
                                "testbucketS3Bucket87F6BFFC",
                                "Arn"
                            ]
                        },
                        {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "testbucketS3Bucket87F6BFFC",
                                            "Arn"
                                        ]
                                    },
                                    "/*"
                                ]
                            ]
                        }
                    ]
                }
            ],
            Version: "2012-10-17"
        }
    });
});
test('Test bucket policy that accepts any requests', () => {
    const stack = new aws_cdk_lib_1.Stack();
    defaults.buildS3Bucket(stack, {
        bucketProps: {
            enforceSSL: false
        }
    }, 'test-bucket');
    expect(stack).not.toHaveResource("AWS::S3::BucketPolicy", {
        PolicyDocument: {
            Statement: [
                {
                    Action: "s3:*",
                    Condition: {
                        Bool: {
                            "aws:SecureTransport": "false"
                        }
                    },
                    Effect: "Deny",
                    Principal: {
                        AWS: "*"
                    },
                    Resource: [
                        {
                            "Fn::GetAtt": [
                                "testbucketS3Bucket87F6BFFC",
                                "Arn"
                            ]
                        },
                        {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "testbucketS3Bucket87F6BFFC",
                                            "Arn"
                                        ]
                                    },
                                    "/*"
                                ]
                            ]
                        }
                    ]
                }
            ],
            Version: "2012-10-17"
        }
    });
});
test('Test enforcing SSL when bucketProps is not provided', () => {
    const stack = new aws_cdk_lib_1.Stack();
    defaults.buildS3Bucket(stack, {}, 'test-bucket');
    expect(stack).toHaveResource("AWS::S3::BucketPolicy", {
        PolicyDocument: {
            Statement: [
                {
                    Action: "s3:*",
                    Condition: {
                        Bool: {
                            "aws:SecureTransport": "false"
                        }
                    },
                    Effect: "Deny",
                    Principal: {
                        AWS: "*"
                    },
                    Resource: [
                        {
                            "Fn::GetAtt": [
                                "testbucketS3Bucket87F6BFFC",
                                "Arn"
                            ]
                        },
                        {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "testbucketS3Bucket87F6BFFC",
                                            "Arn"
                                        ]
                                    },
                                    "/*"
                                ]
                            ]
                        }
                    ]
                }
            ],
            Version: "2012-10-17"
        }
    });
});
test('Test enforcing SSL when bucketProps is provided and enforceSSL is not set', () => {
    const stack = new aws_cdk_lib_1.Stack();
    defaults.buildS3Bucket(stack, {
        bucketProps: {
            versioned: false,
            publicReadAccess: false
        }
    }, 'test-bucket');
    expect(stack).toHaveResource("AWS::S3::BucketPolicy", {
        PolicyDocument: {
            Statement: [
                {
                    Action: "s3:*",
                    Condition: {
                        Bool: {
                            "aws:SecureTransport": "false"
                        }
                    },
                    Effect: "Deny",
                    Principal: {
                        AWS: "*"
                    },
                    Resource: [
                        {
                            "Fn::GetAtt": [
                                "testbucketS3Bucket87F6BFFC",
                                "Arn"
                            ]
                        },
                        {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "testbucketS3Bucket87F6BFFC",
                                            "Arn"
                                        ]
                                    },
                                    "/*"
                                ]
                            ]
                        }
                    ]
                }
            ],
            Version: "2012-10-17"
        }
    });
});
//# sourceMappingURL=data:application/json;base64,