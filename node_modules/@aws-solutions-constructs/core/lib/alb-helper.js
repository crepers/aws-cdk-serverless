"use strict";
/**
 *  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckAlbProps = exports.GetActiveListener = exports.AddFargateTarget = exports.AddLambdaTarget = exports.AddListener = exports.ObtainAlb = void 0;
const elb = require("aws-cdk-lib/aws-elasticloadbalancingv2");
const aws_elasticloadbalancingv2_1 = require("aws-cdk-lib/aws-elasticloadbalancingv2");
const elbt = require("aws-cdk-lib/aws-elasticloadbalancingv2-targets");
const utils_1 = require("./utils");
const alb_defaults_1 = require("./alb-defaults");
const s3_bucket_helper_1 = require("./s3-bucket-helper");
const s3_bucket_defaults_1 = require("./s3-bucket-defaults");
//  Returns the correct ALB Load Balancer to use in this construct, either an existing
//  one provided as an argument or create  new one otherwise.
function ObtainAlb(scope, id, vpc, publicApi, existingLoadBalancerObj, loadBalancerProps, logAccessLogs, loggingBucketProps) {
    let loadBalancer;
    if (existingLoadBalancerObj) {
        loadBalancer = existingLoadBalancerObj;
    }
    else {
        const consolidatedProps = utils_1.consolidateProps({}, loadBalancerProps, { vpc, internetFacing: publicApi });
        loadBalancer = new elb.ApplicationLoadBalancer(scope, `${id}-alb`, consolidatedProps);
        if (logAccessLogs === undefined || logAccessLogs === true) {
            const consolidatedLoggingBucketProps = utils_1.consolidateProps(s3_bucket_defaults_1.DefaultLoggingBucketProps(), loggingBucketProps);
            const loggingBucket = s3_bucket_helper_1.createAlbLoggingBucket(scope, id, consolidatedLoggingBucketProps);
            loadBalancer.logAccessLogs(loggingBucket);
        }
    }
    return loadBalancer;
}
exports.ObtainAlb = ObtainAlb;
function AddListener(scope, id, loadBalancer, listenerProps) {
    let consolidatedListenerProps;
    consolidatedListenerProps = utils_1.consolidateProps(alb_defaults_1.DefaultListenerProps(loadBalancer), listenerProps);
    //  create the listener
    const listener = new elb.ApplicationListener(scope, `${id}-listener`, consolidatedListenerProps);
    loadBalancer.listeners.push(listener);
    if (consolidatedListenerProps.protocol === elb.ApplicationProtocol.HTTP) {
        // This will use core.printWarning in the actual construct
        utils_1.printWarning("AWS recommends encrypting traffic to an Application Load Balancer using HTTPS.");
        if (listenerProps.certificates?.length > 0) {
            throw new Error("HTTP listeners cannot use a certificate");
        }
    }
    else {
        if (!listenerProps.certificates || listenerProps.certificates.length === 0) {
            throw new Error("A listener using HTTPS protocol requires a certificate");
        }
        listener.addCertificates(`${id}-cert`, listenerProps.certificates);
    }
    if (consolidatedListenerProps.protocol === elb.ApplicationProtocol.HTTPS) {
        const opt = {
            port: "443",
            protocol: "HTTPS",
        };
        const httpListener = new elb.ApplicationListener(scope, `${id}-redirect`, {
            loadBalancer,
            protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTP,
            defaultAction: aws_elasticloadbalancingv2_1.ListenerAction.redirect(opt),
        });
        loadBalancer.listeners.push(httpListener);
    }
    return listener;
}
exports.AddListener = AddListener;
// Creates a Target Group for Lambda functions and adds the
// provided functions as a target to that group. Then adds
// the new Target Group to the provided Listener.
function AddLambdaTarget(scope, id, currentListener, lambdaFunction, ruleProps, targetProps) {
    //  Create the target and assign it to a new target group
    const lambdaTarget = new elbt.LambdaTarget(lambdaFunction);
    const newTargetGroup = new elb.ApplicationTargetGroup(scope, `${id}-tg`, {
        targets: [lambdaTarget],
        targetGroupName: targetProps ? targetProps.targetGroupName : undefined,
        healthCheck: targetProps ? targetProps.healthCheck : undefined
    });
    // The interface AddRuleProps includes conditions and priority, combine that
    // with targetGroups and we can assemble AddApplicationTargetGroupProps
    const consolidatedTargetProps = utils_1.consolidateProps({}, ruleProps, { targetGroups: [newTargetGroup] });
    currentListener.addTargetGroups(`${scope.node.id}-targets`, consolidatedTargetProps);
    newTargetGroup.setAttribute('stickiness.enabled', undefined);
    return newTargetGroup;
}
exports.AddLambdaTarget = AddLambdaTarget;
function AddFargateTarget(scope, id, currentListener, fargateService, ruleProps, targetProps) {
    if (targetProps?.protocol !== elb.ApplicationProtocol.HTTPS) {
        utils_1.printWarning('AWS recommends using HTTPS protocol for Target Groups in production applications');
    }
    const newTargetGroup = new elb.ApplicationTargetGroup(scope, `${id}-tg`, targetProps);
    // The interface AddRuleProps includes conditions and priority, combine that
    // with targetGroups and we can assemble an AddApplicationTargetGroupProps object
    const consolidatedTargetProps = utils_1.consolidateProps({ targetGroups: [newTargetGroup] }, ruleProps);
    currentListener.addTargetGroups(`${scope.node.id}-targets`, consolidatedTargetProps);
    newTargetGroup.addTarget(fargateService);
    return newTargetGroup;
}
exports.AddFargateTarget = AddFargateTarget;
// Looks for the listener associated with Target Groups
// If there is a single listener, this returns it whether it is HTTP or HTTPS
// If there are 2 listeners, it finds the HTTPS listener (we assume the HTTP listener redirects to HTTPS)
function GetActiveListener(listeners) {
    let listener;
    if (listeners.length === 0) {
        throw new Error(`There are no listeners in the ALB`);
    }
    if (listeners.length === 1) {
        listener = listeners[0];
    }
    else {
        listener = listeners.find(i => i.node.children[0].protocol === "HTTPS");
    }
    return listener;
}
exports.GetActiveListener = GetActiveListener;
function CheckAlbProps(props) {
    let errorMessages = '';
    let errorFound = false;
    if (props.listenerProps?.certificateArns) {
        errorMessages += "certificateArns is deprecated. Please supply certificates using props.listenerProps.certificates\n";
        errorFound = true;
    }
    if (((props.existingLoadBalancerObj &&
        props.existingLoadBalancerObj.listeners.length === 0) ||
        !props.existingLoadBalancerObj) &&
        !props.listenerProps) {
        errorMessages += "When adding the first listener and target to a load balancer, listenerProps must be specified and include at least a certificate or protocol: HTTP\n";
        errorFound = true;
    }
    if (props.existingLoadBalancerObj &&
        props.existingLoadBalancerObj.listeners.length > 0 &&
        props.listenerProps) {
        errorFound = true;
        errorMessages += "This load balancer already has a listener, listenerProps may not be specified\n";
    }
    if (props.existingLoadBalancerObj &&
        props.existingLoadBalancerObj.listeners.length > 0 &&
        !props.ruleProps) {
        errorFound = true;
        errorMessages += "When adding a second target to an existing listener, there must be rules provided\n";
    }
    // Check construct specific invalid inputs
    if (props.existingLoadBalancerObj && !props.existingVpc) {
        errorFound = true;
        errorMessages += "An existing ALB is already in a VPC, that VPC must be provided in props.existingVpc for the rest of the construct to use.\n";
    }
    if (props.loadBalancerProps?.vpc) {
        errorFound = true;
        errorMessages += 'Specify any existing VPC at the construct level, not within loadBalancerProps.\n';
    }
    if (props.existingLoadBalancerObj) {
        utils_1.printWarning("The public/private property of an existing ALB must match the props.publicApi setting provided.");
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
exports.CheckAlbProps = CheckAlbProps;
//# sourceMappingURL=data:application/json;base64,